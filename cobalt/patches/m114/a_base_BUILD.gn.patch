diff --git a/base/BUILD.gn b/base/BUILD.gn
index 8417fcda40d49..0b966c4014af0 100644
--- a/base/BUILD.gn
+++ b/base/BUILD.gn
@@ -42,6 +42,7 @@ import("//build/timestamp.gni")
 import("//build_overrides/build.gni")
 import("//testing/libfuzzer/fuzzer_test.gni")
 import("//testing/test.gni")
+import("//cobalt/build/configs/hacks.gni")
 
 if (is_mac) {
   # Used to generate fuzzer corpus :base_mach_port_rendezvous_convert_corpus.
@@ -93,20 +94,6 @@ assert(!is_nacl || is_nacl_saigo,
 assert(!is_win || is_clang,
        "only clang-cl is supported on Windows, see https://crbug.com/988071")
 
-if (is_apple) {
-  assert(!use_blink || enable_mach_absolute_time_ticks,
-         "use_blink requires mach absolute time ticks")
-
-  assert(!is_mac || enable_mach_absolute_time_ticks,
-         "mac requires mach absolute time ticks")
-}
-
-# Determines whether libevent should be dep.
-dep_libevent = !is_fuchsia && !is_win && !is_mac && !is_nacl
-
-# Determines whether message_pump_libevent should be used.
-use_libevent = dep_libevent && !is_ios
-
 if (is_android || is_robolectric) {
   import("//build/config/android/rules.gni")
 }
@@ -197,12 +184,7 @@ buildflag_header("ios_cronet_buildflags") {
   flags = [ "CRONET_BUILD=$is_cronet_build" ]
 }
 
-enable_message_pump_epoll = is_linux || is_chromeos || is_android
-buildflag_header("message_pump_buildflags") {
-  header = "message_pump_buildflags.h"
-  header_dir = "base/message_loop"
-  flags = [ "ENABLE_MESSAGE_PUMP_EPOLL=$enable_message_pump_epoll" ]
-}
+use_epoll = is_linux || is_chromeos || is_android
 
 # Base and everything it depends on should be a static library rather than
 # a source set. Base is more of a "library" in the classic sense in that many
@@ -952,6 +934,14 @@ component("base") {
     "vlog.h",
   ]
 
+
+  if (is_cobalt_hermetic_build) {
+    sources += [
+      "base_paths_starboard.cc",
+      "base_paths_starboard.h",
+    ]
+  }
+
   # Various files that are unused in the Chromium build, but presumably here to
   # make downstream's life easier. They are not included in the main sources
   # list to avoid breaking GN formatting's auto-sorting.
@@ -1035,7 +1025,6 @@ component("base") {
   ]
 
   deps = [
-    ":message_pump_buildflags",
     "//base/allocator:buildflags",
     "//base/allocator/partition_allocator:raw_ptr",
     "//base/third_party/double_conversion",
@@ -1046,6 +1035,10 @@ component("base") {
     "//third_party/modp_b64",
   ]
 
+  if (is_cobalt) {
+    deps += [ "//cobalt/common/eztime" ]
+  }
+
   # `raw_ptr` cannot be made a component due to CRT symbol issues.
   # Its gateway to being a component is through `//base`, so we have
   # to provide the appropriate `#define` here.
@@ -1100,7 +1093,7 @@ component("base") {
   # Needed for <atomic> if using newer C++ library than sysroot, except if
   # building inside the cros_sdk environment - use host_toolchain as a
   # more robust check for this.
-  if (!use_sysroot && (is_android || is_chromeos || (is_linux && !is_castos)) &&
+  if (!use_sysroot && (is_android || is_chromeos || (is_linux && !is_cobalt_hermetic_build && !is_castos)) &&
       host_toolchain != "//build/toolchain/cros:host") {
     libs += [ "atomic" ]
   }
@@ -1111,6 +1104,7 @@ component("base") {
       "allocator/partition_allocator/shim/allocator_shim.h",
       "allocator/partition_allocator/shim/allocator_shim_internals.h",
     ]
+
     if (use_partition_alloc) {
       sources += [
         "allocator/partition_allocator/shim/allocator_shim_default_dispatch_to_partition_alloc.cc",
@@ -1730,6 +1724,65 @@ component("base") {
     ]
   }
 
+  if (is_starboard) {
+    sources += [
+      "message_loop/message_pump_ui_starboard.cc",
+      "message_loop/message_pump_ui_starboard.h",
+    ]
+    deps += [
+      "//starboard:starboard_group",
+      "//starboard/common",
+    ]
+  }
+
+  if (is_cobalt_hermetic_build) {
+    sources -= [
+      "debug/debugger_posix.cc",
+      "process/process_posix.cc",
+      "process/process_linux.cc",
+    ]
+    sources += [
+      "process/process_stubs.cc",
+      "starboard/debugger_starboard.cc",
+    ]
+  }
+
+  # TODO: b/384652502 - Cobalt: Fix compiler errors building hermetically.
+  if (enable_cobalt_hermetic_hacks) {
+    sources -= [
+      #           ../../base/process/process_linux.cc:8:10: fatal error: 'linux/magic.h' file not found
+      # #include <linux/magic.h>
+      "debug/proc_maps_linux.cc",
+      "debug/proc_maps_linux.h",
+      "files/dir_reader_linux.h",
+
+      #   ../../base/process/launch_posix.cc:145:18: error: use of undeclared identifier 'SYS_rt_sigaction'
+      # return syscall(SYS_rt_sigaction, sig, act, oact, sizeof(kernel_sigset_t));
+      "posix/can_lower_nice_to.cc",
+      "posix/can_lower_nice_to.h",
+      "profiler/module_cache_posix.cc",
+      "profiler/stack_base_address_posix.cc",
+      "profiler/stack_base_address_posix.h",
+      "profiler/stack_copier_signal.cc",
+      "profiler/stack_copier_signal.h",
+      "profiler/thread_delegate_posix.cc",
+      "profiler/thread_delegate_posix.h",
+
+      #         ../../base/process/process_metrics_posix.cc:119:27: error: invalid use of incomplete type 'mallinfo'
+      # struct mallinfo minfo = mallinfo();
+      "process/process_metrics_posix.cc",
+    ]
+    sources += [
+      "process/process_metrics_posix_starboard_stub.cc",
+      "starboard/linker_stub.h",
+    ]
+
+    # Find a way to fix the offending customizations instead.
+    configs -= [ "//build/config/compiler:prevent_unsafe_narrowing" ]
+
+    all_dependent_configs += [ ":base_starboard_linker_stub" ]
+  }
+
   # Windows.
   if (is_win) {
     sources += [
@@ -2226,6 +2279,13 @@ component("base") {
     frameworks += [ "UIKit.framework" ]
   }
 
+  if (is_cobalt) {
+    sources += [
+      "system/sys_info_starboard.cc",
+      "system/sys_info_starboard.h",
+    ]
+  }
+
   if (use_blink) {
     sources += [
       "files/file_path_watcher.cc",
@@ -2235,18 +2295,7 @@ component("base") {
     ]
   }
 
-  if (dep_libevent) {
-    deps += [ "//third_party/libevent" ]
-  }
-
-  if (use_libevent) {
-    sources += [
-      "message_loop/message_pump_libevent.cc",
-      "message_loop/message_pump_libevent.h",
-    ]
-  }
-
-  if (enable_message_pump_epoll) {
+  if (use_epoll) {
     sources += [
       "message_loop/message_pump_epoll.cc",
       "message_loop/message_pump_epoll.h",
@@ -2477,7 +2526,7 @@ buildflag_header("debugging_buildflags") {
 
   # TODO(crbug.com/1420774): Try and enable these checks on Android too.
   enable_commandline_sequence_checks =
-      (is_debug || dcheck_always_on) && !is_android
+      (is_debug || dcheck_always_on) && !is_android && !is_cobalt
 
   flags = [
     "DCHECK_IS_CONFIGURABLE=$dcheck_is_configurable",
@@ -2632,6 +2681,10 @@ static_library("base_static") {
     configs -= [ "//build/config/compiler:default_optimization" ]
     configs += [ "//build/config/compiler:optimize_max" ]
   }
+
+  if (is_starboard) {
+    deps += [ "//starboard/common" ]
+  }
 }
 
 if (use_custom_libcxx && enable_safe_libcxx && !is_debug) {
@@ -2642,6 +2695,9 @@ if (use_custom_libcxx && enable_safe_libcxx && !is_debug) {
     defines = [ "BASE_IMPLEMENTATION" ]
     sources = [ "nodebug_assertion.cc" ]
     deps = [ ":base_static" ]
+    if (is_starboard) {
+      deps += [ "//starboard:starboard_group" ]
+    }
   }
 }
 
@@ -3417,6 +3473,10 @@ test("base_unittests") {
     "vlog_unittest.cc",
   ]
 
+  if (is_cobalt) {
+    sources += [ "system/sys_info_starboard_unittest.cc" ]
+  }
+
   if (!is_cronet_build) {
     # location_unittest.cc fails gn check for tracing-shimmed Cronet builds.
     # Cronet buildbot do not run base_unittests, so exclusing this test
@@ -3458,12 +3518,19 @@ test("base_unittests") {
     "//third_party/modp_b64",
   ]
 
+  if (is_starboard) {
+    deps += [
+      "//starboard:starboard_group",
+      "//starboard/common",
+    ]
+  } else {
   data_deps = [
     "//base/test:immediate_crash_test_helper",
     "//base/test:test_child_process",
     "//base/test:test_shared_library",
     "//testing/buildbot/filters:base_unittests_filters",
   ]
+  }
 
   if (is_android && enable_chrome_android_internal) {
     data_deps += [ "//clank/build/bot/filters:base_unittests_filters" ]
@@ -3570,6 +3637,39 @@ test("base_unittests") {
     }
   }
 
+  if (is_starboard) {
+    sources -= [
+      "debug/proc_maps_linux_unittest.cc",
+      "debug/stack_trace_unittest.cc",
+      "files/file_util_unittest.cc",
+      "immediate_crash_unittest.cc",
+      "memory/platform_shared_memory_region_unittest.cc",
+      "metrics/field_trial_unittest.cc",
+      "native_library_unittest.cc",
+      "process/process_metrics_unittest.cc",
+      "process/process_util_unittest.cc",
+      "process/process_unittest.cc",
+      "profiler/module_cache_unittest.cc",
+      "profiler/stack_sampling_profiler_unittest.cc",
+      "profiler/stack_sampler_unittest.cc",
+      "sync_socket_unittest.cc",
+      "system/sys_info_unittest.cc",
+      "test/launcher/test_launcher_unittest.cc",
+      "test/launcher/test_results_tracker_unittest.cc",
+      "test/task_environment_unittest.cc",
+      "task/thread_pool/thread_pool_impl_unittest.cc",
+    ]
+  }
+
+  # TODO: b/402471389 - Cobalt: try to enable these tests.
+  if (enable_cobalt_hermetic_hacks) {
+    sources -= [
+      "process/memory_unittest.cc",
+      "state_transitions_unittest.cc",
+      "tools_sanity_unittest.cc",
+    ]
+  }
+
   if (is_mac) {
     sources += [
       "allocator/partition_allocator/shim/allocator_interception_mac_unittest.mm",
@@ -3608,7 +3708,12 @@ test("base_unittests") {
       "posix/file_descriptor_shuffle_unittest.cc",
       "posix/unix_domain_socket_unittest.cc",
     ]
-    if (!is_nacl && !is_apple) {
+    if (is_starboard) {
+      sources -= [
+        "posix/unix_domain_socket_unittest.cc",
+      ]
+    }
+    if (!is_nacl && !is_apple && !is_starboard) {
       sources += [
         "profiler/stack_base_address_posix_unittest.cc",
         "profiler/stack_copier_signal_unittest.cc",
@@ -3786,6 +3891,14 @@ test("base_unittests") {
       "allocator/partition_allocator/thread_cache_unittest.cc",
     ]
 
+
+    # TODO: b/402471389 Cobalt: - try to enable these tests.
+    if (enable_cobalt_hermetic_hacks) {
+      sources -= [
+        "allocator/partition_allocator/page_allocator_unittest.cc",
+        "allocator/partition_allocator/partition_alloc_unittest.cc",
+      ]
+    }
     if (use_starscan) {
       sources += [
         "allocator/partition_allocator/starscan/pcscan_scheduling_unittest.cc",
@@ -3794,6 +3907,11 @@ test("base_unittests") {
         "allocator/partition_allocator/starscan/stack/stack_unittest.cc",
         "allocator/partition_allocator/starscan/state_bitmap_unittest.cc",
       ]
+      if (is_starboard) {
+        sources -= [
+          "allocator/partition_allocator/starscan/scan_loop_unittest.cc",
+        ]
+      }
     }
 
     if ((is_android || is_linux) && target_cpu == "arm64") {
@@ -3843,7 +3961,7 @@ test("base_unittests") {
     }
   }
 
-  if (is_fuchsia || is_linux || is_chromeos) {
+  if (is_fuchsia || (is_linux && !is_cobalt_hermetic_build) || is_chromeos) {
     sources += [
       "debug/elf_reader_unittest.cc",
       "debug/test_elf_image_builder.cc",
@@ -3877,12 +3995,8 @@ test("base_unittests") {
     sources -= [ "message_loop/message_pump_glib_unittest.cc" ]
   }
 
-  if (use_libevent) {
-    sources += [ "message_loop/message_pump_libevent_unittest.cc" ]
-    deps += [
-      ":message_pump_buildflags",
-      "//third_party/libevent",
-    ]
+  if (use_epoll) {
+    sources += [ "message_loop/message_pump_epoll_unittest.cc" ]
   }
 
   if (is_fuchsia) {
@@ -3933,7 +4047,7 @@ test("base_unittests") {
         [ "//build/config/fuchsia/test/logger.shard.test-cml" ]
   }
 
-  if (!is_fuchsia && !is_ios) {
+  if (!is_fuchsia && !is_ios && !is_starboard) {
     sources += [ "files/file_locking_unittest.cc" ]
   }
 
@@ -4928,3 +5042,11 @@ source_set("partition_alloc_test_support") {
     configs += [ "//build/config/compiler:optimize_speed" ]
   }
 }
+
+if (enable_cobalt_hermetic_hacks) {
+  # TODO: b/413130400 - Cobalt: Remove this config 
+  # after removing base/starboard/linker_stub.h
+  config("base_starboard_linker_stub") {
+    cflags = ["-Wno-unreachable-code-break"]
+  }
+}
