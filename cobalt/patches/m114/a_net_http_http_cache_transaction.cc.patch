diff --git a/net/http/http_cache_transaction.cc b/net/http/http_cache_transaction.cc
index c3845cef8fa56..bddc1fb02b2f1 100644
--- a/net/http/http_cache_transaction.cc
+++ b/net/http/http_cache_transaction.cc
@@ -62,6 +62,9 @@
 #include "net/log/net_log_event_type.h"
 #include "net/ssl/ssl_cert_request_info.h"
 #include "net/ssl/ssl_config_service.h"
+#if BUILDFLAG(IS_COBALT)
+#include "base/command_line.h"
+#endif
 
 using base::Time;
 using base::TimeTicks;
@@ -4071,6 +4074,26 @@ bool HttpCache::Transaction::ShouldDisableCaching(
     return true;
   }
 
+#if BUILDFLAG(IS_COBALT)
+  if (base::CommandLine::ForCurrentProcess()->HasSwitch("cobalt-custom-should-disable-http-caching")) {
+    // Similar to the mime-type allow list in Cobalt 25, except images are not
+    // cacheable. Consider making this configurable perhaps with command-line
+    // switches.
+    std::string mime_type;
+    headers.GetMimeType(&mime_type);
+    if (mime_type == "text/css" ||
+        base::StartsWith(mime_type, "font/", base::CompareCase::INSENSITIVE_ASCII)) {
+      return false;
+    }
+    if (mime_type == "text/javascript" || mime_type == "application/javascript" ||
+        mime_type == "text/html") {
+      static constexpr int kMinCacheableContentSize = 1024;
+      return headers.GetContentLength() < kMinCacheableContentSize;
+    }
+    return true;
+  }
+#endif  // BUILDFLAG(IS_COBALT)
+
   bool disable_caching = false;
   if (base::FeatureList::IsEnabled(
           features::kTurnOffStreamingMediaCachingAlways) ||
diff --git a/net/proxy_resolution/proxy_config_service_linux_starboard_stub.cc b/net/proxy_resolution/proxy_config_service_linux_starboard_stub.cc
new file mode 100644
index 0000000000000..c1959a57647ea
