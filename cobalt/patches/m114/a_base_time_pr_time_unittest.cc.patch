diff --git a/base/time/pr_time_unittest.cc b/base/time/pr_time_unittest.cc
index 1381613569c39..b65eb827782fd 100644
--- a/base/time/pr_time_unittest.cc
+++ b/base/time/pr_time_unittest.cc
@@ -11,10 +11,27 @@
 #include "build/build_config.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
+#if BUILDFLAG(IS_STARBOARD)
+#include "cobalt/common/eztime/eztime.h"  // nogncheck
+#endif
+
 using base::Time;
 
 namespace {
 
+#if BUILDFLAG(IS_STARBOARD)
+time_t sb_mktime(struct tm *tm) {
+  if (tm == nullptr) {
+    return -1;
+  }
+  EzTimeExploded exploded = {tm->tm_sec,  tm->tm_min,  tm->tm_hour,
+                             tm->tm_mday, tm->tm_mon,  tm->tm_year,
+                             tm->tm_wday, tm->tm_yday, tm->tm_isdst};
+  EzTimeT secs = EzTimeTImplode(&exploded, EzTimeZone::kEzTimeZoneLocal);
+  return static_cast<time_t>(secs);
+}
+#endif
+
 // time_t representation of 15th Oct 2007 12:45:00 PDT
 PRTime comparison_time_pdt = 1192477500 * Time::kMicrosecondsPerSecond;
 
@@ -42,8 +59,13 @@ class PRTimeTest : public testing::Test {
       0,            // day of year (ignored, output only)
       -1            // DST in effect, -1 tells mktime to figure it out
     };
+#if BUILDFLAG(IS_STARBOARD)
+    comparison_time_local_ =
+        sb_mktime(&local_comparison_tm) * Time::kMicrosecondsPerSecond;
+#else
     comparison_time_local_ =
         mktime(&local_comparison_tm) * Time::kMicrosecondsPerSecond;
+#endif
     ASSERT_GT(comparison_time_local_, 0);
 
     const int microseconds = 441381;
@@ -58,8 +80,13 @@ class PRTimeTest : public testing::Test {
       0,            // day of year (ignored, output only)
       -1            // DST in effect, -1 tells mktime to figure it out
     };
+#if BUILDFLAG(IS_STARBOARD)
+    comparison_time_local_2_ =
+        sb_mktime(&local_comparison_tm_2) * Time::kMicrosecondsPerSecond;
+#else
     comparison_time_local_2_ =
         mktime(&local_comparison_tm_2) * Time::kMicrosecondsPerSecond;
+#endif
     ASSERT_GT(comparison_time_local_2_, 0);
     comparison_time_local_2_ += microseconds;
   }
@@ -68,6 +95,14 @@ class PRTimeTest : public testing::Test {
   PRTime comparison_time_local_2_;
 };
 
+#if !BUILDFLAG(IS_STARBOARD)
+// More of the no local time on Starboard issue. We can't use these standard
+// functions to check NSPR Time against because they don't always work on all
+// platforms, making these tests inherently flaky and non-portable.
+
+// Tests the PR_ParseTimeString nspr helper function for
+// a variety of time strings.
+
 // Tests the PR_ParseTimeString nspr helper function for
 // a variety of time strings.
 TEST_F(PRTimeTest, ParseTimeTest1) {
@@ -91,6 +126,7 @@ TEST_F(PRTimeTest, ParseTimeTest1) {
   EXPECT_EQ(PR_SUCCESS, result);
   EXPECT_EQ(current_time64, parsed_time);
 }
+#endif
 
 TEST_F(PRTimeTest, ParseTimeTest2) {
   PRTime parsed_time = 0;
