diff --git a/build/config/c++/BUILD.gn b/build/config/c++/BUILD.gn
index c00dcef4cd1e8..46371aa7f34c3 100644
--- a/build/config/c++/BUILD.gn
+++ b/build/config/c++/BUILD.gn
@@ -4,6 +4,7 @@ import("//build/config/chromeos/ui_mode.gni")
 import("//build/config/compiler/compiler.gni")
 import("//build/config/dcheck_always_on.gni")
 import("//buildtools/deps_revisions.gni")
+import("//cobalt/build/configs/hacks.gni")
 
 assert(use_custom_libcxx, "should only be used if use_custom_libcxx is set")
 
@@ -68,6 +69,35 @@ config("runtime_library") {
       "-isystem" + rebase_path("$libcxx_prefix/include", root_build_dir),
       "-isystem" + rebase_path("$libcxxabi_prefix/include", root_build_dir),
     ]
+    if (is_cobalt_hermetic_build && current_toolchain == cobalt_toolchain) {
+      # Note that //third_party/musl/src/starboard/include MUST be included
+      # before the general musl include directory to prefer Starboard-specific
+      # posix headers over default posix headers.
+      cflags_cc += [
+        "-isystem" + rebase_path("//third_party/musl/src/starboard/include",
+                                 root_build_dir),
+        "-isystem" + rebase_path("//third_party/musl/include", root_build_dir),
+        "-isystem" +
+            rebase_path("//third_party/musl/arch/generic", root_build_dir),
+        "-femulated-tls",
+      ]
+      cflags_c = [
+        "-isystem" + rebase_path("//third_party/musl/src/starboard/include",
+                                 root_build_dir),
+        "-isystem" + rebase_path("//third_party/musl/include", root_build_dir),
+        "-isystem" +
+            rebase_path("//third_party/musl/arch/generic", root_build_dir),
+        "-femulated-tls",
+      ]
+      if (enable_cobalt_hermetic_hacks) {
+        cflags_cc += [ "-isystem" +
+                       rebase_path("//third_party/musl/src/starboard/hacks",
+                                   root_build_dir) ]
+        cflags_c +=
+            [ "-isystem" + rebase_path("//third_party/musl/src/starboard/hacks",
+                                       root_build_dir) ]
+      }
+    }
 
     cflags_objcc = cflags_cc
 
