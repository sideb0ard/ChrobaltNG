diff --git a/media/mojo/services/gpu_mojo_media_client.h b/media/mojo/services/gpu_mojo_media_client.h
index 3cbcdb3fafb84..4b6407492691f 100644
--- a/media/mojo/services/gpu_mojo_media_client.h
+++ b/media/mojo/services/gpu_mojo_media_client.h
@@ -126,6 +126,40 @@ std::unique_ptr<AudioDecoder> CreatePlatformAudioDecoder(
 std::unique_ptr<AudioEncoder> CreatePlatformAudioEncoder(
     scoped_refptr<base::SequencedTaskRunner> task_runner);
 
+#if BUILDFLAG(USE_STARBOARD_MEDIA)
+// Encapsulate parameters to pass to StarboardRenderer.
+struct StarboardRendererTraits {
+  scoped_refptr<base::SequencedTaskRunner> task_runner;
+  mojo::PendingRemote<mojom::MediaLog> media_log_remote;
+  const base::UnguessableToken& overlay_plane_id;
+  base::TimeDelta audio_write_duration_local;
+  base::TimeDelta audio_write_duration_remote;
+  const std::string& max_video_capabilities;
+  mojo::PendingReceiver<mojom::StarboardRendererExtension>
+        renderer_extension_receiver;
+  mojo::PendingRemote<mojom::StarboardRendererClientExtension>
+        client_extension_remote;
+
+  StarboardRendererTraits(
+      scoped_refptr<base::SequencedTaskRunner> task_runner,
+      mojo::PendingRemote<mojom::MediaLog> media_log_remote,
+      const base::UnguessableToken& overlay_plane_id,
+      base::TimeDelta audio_write_duration_local,
+      base::TimeDelta audio_write_duration_remote,
+      const std::string& max_video_capabilities,
+      mojo::PendingReceiver<mojom::StarboardRendererExtension>
+          renderer_extension_receiver,
+      mojo::PendingRemote<mojom::StarboardRendererClientExtension>
+          client_extension_remote);
+  ~StarboardRendererTraits();
+};
+
+// Creates a platform-specific media::StarboardRenderer.
+// This is used on Cobalt (android/linux).
+std::unique_ptr<Renderer> CreatePlatformStarboardRenderer(
+    StarboardRendererTraits& traits);
+#endif  // BUILDFLAG(USE_STARBOARD_MEDIA)
+
 // Creates a CDM factory, right now only used on android and chromeos.
 std::unique_ptr<CdmFactory> CreatePlatformCdmFactory(
     mojom::FrameInterfaceFactory* frame_interfaces);
@@ -180,6 +214,17 @@ class MEDIA_MOJO_EXPORT GpuMojoMediaClient final : public MojoMediaClient {
       const gfx::ColorSpace& target_color_space,
       mojo::PendingRemote<stable::mojom::StableVideoDecoder> oop_video_decoder)
       final;
+#if BUILDFLAG(USE_STARBOARD_MEDIA)
+  std::unique_ptr<Renderer> CreateStarboardRenderer(
+      mojom::FrameInterfaceFactory* frame_interfaces,
+      scoped_refptr<base::SingleThreadTaskRunner> task_runner,
+      mojo::PendingRemote<mojom::MediaLog> media_log_remote,
+      const StarboardRendererConfig& config,
+      mojo::PendingReceiver<mojom::StarboardRendererExtension>
+          renderer_extension_receiver,
+      mojo::PendingRemote<mojom::StarboardRendererClientExtension>
+          client_extension_remote) final;
+#endif  // BUILDFLAG(USE_STARBOARD_MEDIA)
   std::unique_ptr<CdmFactory> CreateCdmFactory(
       mojom::FrameInterfaceFactory* interface_provider) final;
 
