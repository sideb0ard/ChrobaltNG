diff --git a/base/test/run_all_unittests.cc b/base/test/run_all_unittests.cc
index 4f0611aca9aa7..055b8bcd1a116 100644
--- a/base/test/run_all_unittests.cc
+++ b/base/test/run_all_unittests.cc
@@ -13,6 +13,11 @@
 #include "base/win/com_init_util.h"
 #endif  // BUILDFLAG(IS_WIN)
 
+#if BUILDFLAG(IS_COBALT_HERMETIC_BUILD)
+#include "base/test/allow_check_is_test_for_testing.h"
+#include "starboard/client_porting/wrap_main/wrap_main.h"
+#endif  // BUILDFLAG(IS_COBALT_HERMETIC_BUILD)
+
 namespace base {
 
 namespace {
@@ -65,9 +70,26 @@ class BaseUnittestSuite : public TestSuite {
 
 }  // namespace base
 
+#if BUILDFLAG(IS_COBALT_HERMETIC_BUILD)
+static int InitAndRunAllTests(int argc, char** argv) {
+  base::test::AllowCheckIsTestForTesting();
+  return base::TestSuite(argc, argv).Run();
+}
+
+// For the Starboard OS define SbEventHandle as the entry point
+SB_EXPORT STARBOARD_WRAP_SIMPLE_MAIN(InitAndRunAllTests);
+
+#if !SB_IS(EVERGREEN)
+// Define main() for non-Evergreen Starboard OS.
+int main(int argc, char** argv) {
+  return SbRunStarboardMain(argc, argv, SbEventHandle);
+}
+#endif  // !SB_IS(EVERGREEN)
+#else
 int main(int argc, char** argv) {
   base::BaseUnittestSuite test_suite(argc, argv);
   return base::LaunchUnitTests(
       argc, argv,
       base::BindOnce(&base::TestSuite::Run, base::Unretained(&test_suite)));
 }
+#endif  // BUILDFLAG(IS_COBALT_HERMETIC_BUILD)
