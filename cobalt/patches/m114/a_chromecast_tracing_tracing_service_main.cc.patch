diff --git a/chromecast/tracing/tracing_service_main.cc b/chromecast/tracing/tracing_service_main.cc
index 068c866667490..67c32485f6817 100644
--- a/chromecast/tracing/tracing_service_main.cc
+++ b/chromecast/tracing/tracing_service_main.cc
@@ -79,7 +79,7 @@ std::vector<std::string> ParseCategories(base::StringPiece message) {
   return categories;
 }
 
-class TraceCopyTask : public base::MessagePumpLibevent::FdWatcher {
+class TraceCopyTask : public base::MessagePumpEpoll::FdWatcher {
  public:
   // Read 64 kB at a time (standard pipe capacity).
   static constexpr size_t kCopyBufferSize = 1UL << 16;
@@ -105,8 +105,10 @@ class TraceCopyTask : public base::MessagePumpLibevent::FdWatcher {
         base::MessagePumpForIO::WATCH_WRITE, &out_watcher_, this);
   }
 
-  // base::MessagePumpLibevent::FdWatcher:
-  void OnFileCanReadWithoutBlocking(int fd) override { NOTREACHED(); }
+  // base::MessagePumpEpoll::FdWatcher:
+  void OnFileCanReadWithoutBlocking(int fd) override {
+    NOTREACHED_IN_MIGRATION();
+  }
   void OnFileCanWriteWithoutBlocking(int fd) override {
     DCHECK_EQ(out_fd_.get(), fd);
     CopyTraceData();
@@ -168,13 +170,13 @@ class TraceCopyTask : public base::MessagePumpLibevent::FdWatcher {
 
   // Pipe for trace data.
   base::ScopedFD out_fd_;
-  base::MessagePumpLibevent::FdWatchController out_watcher_;
+  base::MessagePumpEpoll::FdWatchController out_watcher_;
 
   // Callback for when copy finishes.
   base::OnceCallback<void(Status, size_t)> callback_;
 };
 
-class TraceConnection : public base::MessagePumpLibevent::FdWatcher {
+class TraceConnection : public base::MessagePumpEpoll::FdWatcher {
  public:
   TraceConnection(base::ScopedFD connection_fd, base::OnceClosure callback)
       : recv_buffer_(new char[kMessageSize]),
@@ -190,7 +192,7 @@ class TraceConnection : public base::MessagePumpLibevent::FdWatcher {
         base::MessagePumpForIO::WATCH_READ, &connection_watcher_, this);
   }
 
-  // base::MessagePumpLibevent::FdWatcher:
+  // base::MessagePumpEpoll::FdWatcher:
   void OnFileCanReadWithoutBlocking(int fd) override {
     DCHECK_EQ(connection_fd_.get(), fd);
     ReceiveClientMessage();
@@ -322,7 +324,7 @@ class TraceConnection : public base::MessagePumpLibevent::FdWatcher {
 
   // Client connection.
   base::ScopedFD connection_fd_;
-  base::MessagePumpLibevent::FdWatchController connection_watcher_;
+  base::MessagePumpEpoll::FdWatchController connection_watcher_;
 
   // Pipe for trace output.
   base::ScopedFD trace_pipe_;
@@ -336,7 +338,7 @@ class TraceConnection : public base::MessagePumpLibevent::FdWatcher {
   base::WeakPtrFactory<TraceConnection> weak_ptr_factory_;
 };
 
-class TracingService : public base::MessagePumpLibevent::FdWatcher {
+class TracingService : public base::MessagePumpEpoll::FdWatcher {
  public:
   TracingService()
       : server_socket_watcher_(FROM_HERE), weak_ptr_factory_(this) {}
@@ -354,7 +356,7 @@ class TracingService : public base::MessagePumpLibevent::FdWatcher {
     return true;
   }
 
-  // base::MessagePumpLibevent::FdWatcher:
+  // base::MessagePumpEpoll::FdWatcher:
   void OnFileCanReadWithoutBlocking(int fd) override {
     DCHECK_EQ(server_socket_.get(), fd);
     AcceptConnection();
@@ -381,7 +383,7 @@ class TracingService : public base::MessagePumpLibevent::FdWatcher {
 
   // Socket and watcher for listening socket.
   base::ScopedFD server_socket_;
-  base::MessagePumpLibevent::FdWatchController server_socket_watcher_;
+  base::MessagePumpEpoll::FdWatchController server_socket_watcher_;
 
   // Currently active tracing connection.
   // There can only be one; ftrace affects the whole system.
