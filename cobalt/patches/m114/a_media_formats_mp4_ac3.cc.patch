diff --git a/media/formats/mp4/ac3.cc b/media/formats/mp4/ac3.cc
index b08e8dcb5ffd8..ba6b4e6fa24c5 100644
--- a/media/formats/mp4/ac3.cc
+++ b/media/formats/mp4/ac3.cc
@@ -30,24 +30,41 @@ bool AC3::Parse(const std::vector<uint8_t>& data, MediaLog* media_log) {
     return false;
   }
 
+  // For AC3SpecificBox, Please refer to ETSI TS 102 366 V1.4.1
+  //    https://www.etsi.org/deliver/etsi_ts/102300_102399/102366/01.03.01_60/ts_102366v010301p.pdf
+  //    F.4 AC3SpecificBox
+  //        fscod           2 bits
+  //        bsid            5 bits
+  //        bsmod           3 bits
+  //        acmod           3 bits
+  //        lfeon           1 bits
+  //        bit_rate_code   5 bits
+  //        reserved        5 bits
+
+  if (data.size() * 8 < (2 + 5 + 3 + 3 + 1 + 5 + 5)) {
+    return false;
+  }
+
   // Parse dac3 box using reader.
   BitReader reader(&data[0], data.size());
 
-  // Please refer to ETSI TS 102 366 V1.4.1
-  //    https://www.etsi.org/deliver/etsi_ts/102300_102399/102366/01.03.01_60/ts_102366v010301p.pdf
-  //    F.4 AC3SpecificBox
-  //        fscod 2 bits
-  //        bsid  5 bits
-  //        bsmod 3 bits
+  // skip fscod, bsid, bsmod
   RCHECK(reader.SkipBits(2 + 5 + 3));
 
   int acmod;
   RCHECK(reader.ReadBits(3, &acmod));
+  if (acmod >= static_cast<int>(sizeof(kGlobalChannelArray))) {
+    return false;
+  }
+
   int lfeon;
   RCHECK(reader.ReadBits(1, &lfeon));
 
   channel_count_ = kGlobalChannelArray[acmod] + lfeon;
   RCHECK(channel_count_ >= 1 && channel_count_ <= limits::kMaxChannels);
+
+  // skip bit_rate_code, reserved
+  RCHECK(reader.SkipBits(5 + 5));
   return true;
 }
 
