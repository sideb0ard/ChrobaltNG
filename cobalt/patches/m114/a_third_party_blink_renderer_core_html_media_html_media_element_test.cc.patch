diff --git a/third_party/blink/renderer/core/html/media/html_media_element_test.cc b/third_party/blink/renderer/core/html/media/html_media_element_test.cc
index 6881349d0588e..c3439a87a4869 100644
--- a/third_party/blink/renderer/core/html/media/html_media_element_test.cc
+++ b/third_party/blink/renderer/core/html/media/html_media_element_test.cc
@@ -35,6 +35,12 @@
 #include "third_party/blink/renderer/platform/wtf/vector.h"
 #include "ui/gfx/geometry/size.h"
 
+#if BUILDFLAG(USE_STARBOARD_MEDIA)
+#include "base/test/scoped_feature_list.h"
+#include "third_party/blink/renderer/platform/network/mime/content_type.h"
+#include "third_party/blink/renderer/platform/network/mime/mime_type_registry.h"
+#endif  // BUILDFLAG(USE_STARBOARD_MEDIA)
+
 using ::testing::_;
 using ::testing::AnyNumber;
 using ::testing::NanSensitiveDoubleEq;
@@ -1568,4 +1574,54 @@ TEST_P(HTMLMediaElementTest, CanFreezeWithMediaPlayerAttached) {
   EXPECT_FALSE(MediaIsPlaying());
 }
 
+#if BUILDFLAG(USE_STARBOARD_MEDIA)
+TEST(HTMLMediaElementTest, CanHandleCobaltProgressiveSupportQueries) {
+  const ContentType progressive_type(
+      "video/mp4; codecs=\"avc1.42001E, mp4a.40.2\"");
+  const ContentType progressive_type_missing_whitespace(
+      "video/mp4; codecs=\"avc1.42001E,mp4a.40.2\"");
+  const ContentType adaptive_video_type(
+      "video/mp4; codecs=\"avc1.4d4015\"; framerate=30");
+  const ContentType adaptive_audio_type(
+      "audio/mp4; codecs=\"mp4a.40.2\"; channels=2");
+
+  {
+    base::test::ScopedFeatureList scoped_list;
+    scoped_list.InitAndDisableFeature(media::kCobaltProgressivePlayback);
+    // Reject progressive content types when CobaltProgressivePlayback is
+    // disabled.
+    EXPECT_EQ(HTMLMediaElement::GetSupportsType(progressive_type),
+              MIMETypeRegistry::kNotSupported);
+    // Reject progressive content types when the "codecs" parameter lacks
+    // whitespace.
+    EXPECT_EQ(
+        HTMLMediaElement::GetSupportsType(progressive_type_missing_whitespace),
+        MIMETypeRegistry::kNotSupported);
+    // Continue to support adaptive content types.
+    EXPECT_NE(HTMLMediaElement::GetSupportsType(adaptive_video_type),
+              MIMETypeRegistry::kNotSupported);
+    EXPECT_NE(HTMLMediaElement::GetSupportsType(adaptive_audio_type),
+              MIMETypeRegistry::kNotSupported);
+  }
+  {
+    base::test::ScopedFeatureList scoped_list(
+        media::kCobaltProgressivePlayback);
+    // Accept progressive content types when CobaltProgressivePlayback is
+    // enabled.
+    EXPECT_NE(HTMLMediaElement::GetSupportsType(progressive_type),
+              MIMETypeRegistry::kNotSupported);
+    // Continue to accept progressive content types when the "codecs" parameter
+    // lacks whitespace.
+    EXPECT_NE(
+        HTMLMediaElement::GetSupportsType(progressive_type_missing_whitespace),
+        MIMETypeRegistry::kNotSupported);
+    // Continue to support adaptive content types.
+    EXPECT_NE(HTMLMediaElement::GetSupportsType(adaptive_video_type),
+              MIMETypeRegistry::kNotSupported);
+    EXPECT_NE(HTMLMediaElement::GetSupportsType(adaptive_audio_type),
+              MIMETypeRegistry::kNotSupported);
+  }
+}
+#endif  // BUILDFLAG(USE_STARBOARD_MEDIA)
+
 }  // namespace blink
