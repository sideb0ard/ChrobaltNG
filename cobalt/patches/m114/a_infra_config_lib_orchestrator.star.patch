diff --git a/infra/config/lib/orchestrator.star b/infra/config/lib/orchestrator.star
index ec166fd9f7489..39d75ae2a59e6 100644
--- a/infra/config/lib/orchestrator.star
+++ b/infra/config/lib/orchestrator.star
@@ -37,8 +37,6 @@ _COMPILATOR = nodes.create_node_type_with_builder_ref("compilator")
 _EXPERIMENTAL_ORCHESTRATOR_NAMES_BY_COMPILATOR_NAME = {
 }
 
-SOURCELESS_BUILDER_CACHE_NAME = "unused_builder_cache"
-
 def register_orchestrator(bucket, name, builder_group, compilator):
     key = _ORCHESTRATOR.add(bucket, name, props = {
         "bucket": bucket,
@@ -206,11 +204,6 @@ def _get_orchestrators_and_compilators(ctx):
         experimental_orchestrators = experimental_orchestrators_by_compilator_name.get(c.name, []),
     ) for c in compilators]
 
-_ALLOWED_COMPILATOR_PROPERTIES = set([
-    "builder_group",
-    "recipe",
-])
-
 def _set_orchestrator_properties(ctx):
     details = _get_orchestrators_and_compilators(ctx)
     for d in details:
@@ -226,22 +219,13 @@ def _set_orchestrator_properties(ctx):
                 fail("\n".join(message))
 
         compilator = d.compilator
-        orchestrator_caches = []
-        for cache in orchestrator.builder.caches:
-            # The sourceless builder cache is an optimization to speed up the
-            # process of the orchestrator getting assigned a bot since it won't
-            # be storing anything in the builder cache to preserve between runs,
-            # so it shouldn't be moved to the compilator
-            if cache.name == SOURCELESS_BUILDER_CACHE_NAME:
-                orchestrator_caches.append(cache)
-
-            else:
-                # Other caches should (probably?) be moved to the compilator. At
-                # the time of writing, the only caches that would be transferred
-                # are the xcode caches, which are added by a parameter that also
-                # sets the xcode_build_version property.
-                compilator.builder.caches.append(cache)
-        orchestrator.builder.caches = orchestrator_caches
+        compilator_properties = dict(orchestrator_properties)
+
+        # The "cq" property doesn't inherit; compilators aren't ever triggered by CV.
+        compilator_properties.pop("cq", None)
+
+        compilator_properties.update(json.decode(compilator.builder.properties))
+        compilator.builder.properties = json.encode(compilator_properties)
         _update_description(
             compilator.builder,
             ("This is the compilator half of an orchestrator + compilator pair of builders." +
@@ -251,17 +235,9 @@ def _set_orchestrator_properties(ctx):
              )),
         )
 
-        compilator_properties = json.decode(compilator.builder.properties)
-        invalid_compilator_properties = [p for p in compilator_properties if p not in _ALLOWED_COMPILATOR_PROPERTIES]
-        if invalid_compilator_properties:
-            fail("compilator {!r} has forbidden properties {},".format(compilator.builder.name, invalid_compilator_properties) +
-                 " set the corresponding attributes on the orchestrator instead" +
-                 " (if the property was generated by default, modify compilator_builder to set corresponding attributes to a value that doesn't generate the properties)")
-
         orchestrator_properties["$build/chromium_orchestrator"] = {
             "compilator": compilator.simple_name,
             "compilator_watcher_git_revision": _COMPILATOR_WATCHER_GIT_REVISION,
-            "propagate_properties_to_compilator": True,
         }
         encoded_orchestrator_properties = json.encode(orchestrator_properties)
         orchestrator.builder.properties = encoded_orchestrator_properties
