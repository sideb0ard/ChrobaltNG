diff --git a/services/network/public/cpp/content_security_policy/content_security_policy.cc b/services/network/public/cpp/content_security_policy/content_security_policy.cc
index 63684feee64b0..38c1ba45337ba 100644
--- a/services/network/public/cpp/content_security_policy/content_security_policy.cc
+++ b/services/network/public/cpp/content_security_policy/content_security_policy.cc
@@ -41,7 +41,12 @@ using DirectivesMap =
 namespace {
 
 bool IsDirectiveNameCharacter(char c) {
+#if BUILDFLAG(IS_COBALT)
+  // To accomodate "h5vcc".
+  return base::IsAsciiAlpha(c) || c == '-' || c == '5';
+#else
   return base::IsAsciiAlpha(c) || c == '-';
+#endif
 }
 
 bool IsDirectiveValueCharacter(char c) {
@@ -144,6 +149,12 @@ CSPDirectiveName ToCSPDirectiveName(base::StringPiece name) {
   if (base::EqualsCaseInsensitiveASCII(name, "navigate-to")) {
     return CSPDirectiveName::NavigateTo;
   }
+#if BUILDFLAG(IS_COBALT)
+  if (base::EqualsCaseInsensitiveASCII(name, "h5vcc-location-src")
+      || base::EqualsCaseInsensitiveASCII(name, "cobalt-location-src")) {
+    return CSPDirectiveName::CobaltLocationSrc;
+  }
+#endif
 
   return CSPDirectiveName::Unknown;
 }
@@ -182,6 +193,9 @@ bool SupportedInReportOnly(CSPDirectiveName directive) {
     case CSPDirectiveName::TrustedTypes:
     case CSPDirectiveName::Unknown:
     case CSPDirectiveName::WorkerSrc:
+#if BUILDFLAG(IS_COBALT)
+    case CSPDirectiveName::CobaltLocationSrc:
+#endif
       return true;
   };
 }
@@ -220,6 +234,9 @@ bool SupportedInMeta(CSPDirectiveName directive) {
     case CSPDirectiveName::Unknown:
     case CSPDirectiveName::UpgradeInsecureRequests:
     case CSPDirectiveName::WorkerSrc:
+#if BUILDFLAG(IS_COBALT)
+    case CSPDirectiveName::CobaltLocationSrc:
+#endif
       return true;
   };
 }
@@ -247,6 +264,11 @@ const char* ErrorMessage(CSPDirectiveName directive) {
     case CSPDirectiveName::ConnectSrc:
       return "Refused to connect to '$1' because it violates the "
              "following Content Security Policy directive: \"$2\".";
+#if BUILDFLAG(IS_COBALT)
+    case CSPDirectiveName::CobaltLocationSrc:
+      return "Refused to navigate to '$1' because it violates the "
+             "following Content Security Policy directive: \"$2\".";
+#endif
 
     case CSPDirectiveName::BaseURI:
     case CSPDirectiveName::BlockAllMixedContent:
@@ -711,6 +733,13 @@ mojom::CSPSourceListPtr ParseSourceList(
       continue;
     }
 
+#if BUILDFLAG(IS_COBALT)
+    if (base::EqualsCaseInsensitiveASCII(expression, "'cobalt-insecure-local-network'")) {
+      directive->cobalt_insecure_local_network = true;
+      continue;
+    }
+#endif
+
     std::string nonce;
     if (ParseNonce(expression, &nonce)) {
       directive->nonces.push_back(std::move(nonce));
@@ -1035,6 +1064,9 @@ void AddContentSecurityPolicyFromHeader(
       case CSPDirectiveName::StyleSrcAttr:
       case CSPDirectiveName::StyleSrcElem:
       case CSPDirectiveName::WorkerSrc:
+#if BUILDFLAG(IS_COBALT)
+      case CSPDirectiveName::CobaltLocationSrc:
+#endif
         out->directives[directive_name] = ParseSourceList(
             directive_name, directive.second, out->parsing_errors);
         break;
@@ -1169,6 +1201,9 @@ CSPDirectiveName CSPFallbackDirective(CSPDirectiveName directive,
     case CSPDirectiveName::TreatAsPublicAddress:
     case CSPDirectiveName::TrustedTypes:
     case CSPDirectiveName::UpgradeInsecureRequests:
+#if BUILDFLAG(IS_COBALT)
+    case CSPDirectiveName::CobaltLocationSrc:
+#endif
       return CSPDirectiveName::Unknown;
     case CSPDirectiveName::Unknown:
       NOTREACHED();
@@ -1478,6 +1513,9 @@ bool Subsumes(const mojom::ContentSecurityPolicy& policy_a,
       CSPDirectiveName::StyleSrcAttr,   CSPDirectiveName::StyleSrcElem,
       CSPDirectiveName::WorkerSrc,      CSPDirectiveName::BaseURI,
       CSPDirectiveName::FrameAncestors, CSPDirectiveName::FormAction,
+#if BUILDFLAG(IS_COBALT)
+      CSPDirectiveName::CobaltLocationSrc,
+#endif
       CSPDirectiveName::NavigateTo,     CSPDirectiveName::FencedFrameSrc};
 
   return base::ranges::all_of(directives, [&](CSPDirectiveName directive) {
@@ -1565,6 +1603,10 @@ std::string ToString(CSPDirectiveName name) {
       return "report-to";
     case CSPDirectiveName::NavigateTo:
       return "navigate-to";
+#if BUILDFLAG(IS_COBALT)
+    case CSPDirectiveName::CobaltLocationSrc:
+      return "h5vcc-location-src";
+#endif
     case CSPDirectiveName::Unknown:
       return "";
   }
