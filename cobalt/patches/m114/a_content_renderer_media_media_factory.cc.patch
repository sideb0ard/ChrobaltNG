diff --git a/content/renderer/media/media_factory.cc b/content/renderer/media/media_factory.cc
index 1e22e5b2afb1c..a4ea1c04755c5 100644
--- a/content/renderer/media/media_factory.cc
+++ b/content/renderer/media/media_factory.cc
@@ -59,6 +59,7 @@
 #include "third_party/blink/public/platform/media/web_encrypted_media_client_impl.h"
 #include "third_party/blink/public/platform/media/web_media_player_builder.h"
 #include "third_party/blink/public/platform/platform.h"
+#include "third_party/blink/public/platform/web_media_player_client.h"
 #include "third_party/blink/public/platform/web_surface_layer_bridge.h"
 #include "third_party/blink/public/platform/web_video_frame_submitter.h"
 #include "third_party/blink/public/web/blink.h"
@@ -134,6 +135,11 @@
 #include "media/mojo/mojom/speech_recognition_service.mojom.h"
 #endif  // BUILDFLAG(IS_WIN)
 
+#if BUILDFLAG(USE_STARBOARD_MEDIA)
+#include "media/base/starboard/renderer_factory_traits.h"
+#include "media/mojo/clients/starboard/starboard_renderer_client_factory.h"
+#endif // BUILDFLAG(USE_STARBOARD_MEDIA)
+
 namespace {
 
 // This limit is much higher than it needs to be right now, because the logic
@@ -437,7 +443,12 @@ blink::WebMediaPlayer* MediaFactory::CreateMediaPlayer(
       render_frame_->GetRenderFrameMediaPlaybackOptions(),
       decoder_factory_.get(),
       std::make_unique<blink::RemotePlaybackClientWrapperImpl>(client),
-      &media_observer);
+#if BUILDFLAG(USE_STARBOARD_MEDIA)
+      &media_observer, client->GetElementId(), 
+      client->getMaxVideoCapabilities());
+#else // BUILDFLAG(USE_STARBOARD_MEDIA)
+      &media_observer, client->GetElementId());
+#endif // BUILDFLAG(USE_STARBOARD_MEDIA)
 
 #if BUILDFLAG(ENABLE_MEDIA_REMOTING)
   DCHECK(media_observer);
@@ -541,7 +552,12 @@ MediaFactory::CreateRendererFactorySelector(
     const RenderFrameMediaPlaybackOptions& renderer_media_playback_options,
     media::DecoderFactory* decoder_factory,
     std::unique_ptr<media::RemotePlaybackClientWrapper> client_wrapper,
-    base::WeakPtr<media::MediaObserver>* out_media_observer) {
+    base::WeakPtr<media::MediaObserver>* out_media_observer,
+#if BUILDFLAG(USE_STARBOARD_MEDIA)
+    int element_id, const std::string& max_video_capabilities) {
+#else // BUILDFLAG(USE_STARBOARD_MEDIA)
+    int element_id) {
+#endif // BUILDFLAG(USE_STARBOARD_MEDIA)
   using media::RendererType;
 
   RenderThreadImpl* render_thread = RenderThreadImpl::current();
@@ -565,7 +581,8 @@ MediaFactory::CreateRendererFactorySelector(
   auto factory = GetContentClient()->renderer()->GetBaseRendererFactory(
       render_frame_, media_log, decoder_factory,
       base::BindRepeating(&RenderThreadImpl::GetGpuFactories,
-                          base::Unretained(render_thread)));
+                          base::Unretained(render_thread)),
+      element_id);
   if (factory) {
     is_base_renderer_factory_set = true;
     factory_selector->AddBaseFactory(RendererType::kContentEmbedderDefined,
@@ -610,6 +627,18 @@ MediaFactory::CreateRendererFactorySelector(
 #endif  // BUILDFLAG(IS_ANDROID)
 
 #if BUILDFLAG(ENABLE_MOJO_RENDERER)
+#if BUILDFLAG(USE_STARBOARD_MEDIA)
+  media::RendererFactoryTraits renderer_factory_traits;
+  GetContentClient()->renderer()->GetStarboardRendererFactoryTraits(&renderer_factory_traits);
+  renderer_factory_traits.max_video_capabilities = max_video_capabilities;
+  is_base_renderer_factory_set = true;
+  factory_selector->AddBaseFactory(RendererType::kStarboard,
+    std::make_unique<media::StarboardRendererClientFactory>(media_log,
+        CreateMojoRendererFactory(),
+        base::BindRepeating(&RenderThreadImpl::GetGpuFactories,
+          base::Unretained(render_thread)),
+        &renderer_factory_traits));
+#endif // BUILDFLAG(USE_STARBOARD_MEDIA)
   if (!is_base_renderer_factory_set &&
       renderer_media_playback_options.is_mojo_renderer_enabled()) {
     is_base_renderer_factory_set = true;
