diff --git a/media/base/decoder_buffer.h b/media/base/decoder_buffer.h
index e8c8cfeb766d6..63d4deaed44e4 100644
--- a/media/base/decoder_buffer.h
+++ b/media/base/decoder_buffer.h
@@ -22,8 +22,12 @@
 #include "base/time/time.h"
 #include "build/build_config.h"
 #include "media/base/decrypt_config.h"
+#include "media/base/demuxer_stream.h"
+#if BUILDFLAG(USE_STARBOARD_MEDIA)
 #include "media/base/media_export.h"
+#endif // BUILDFLAG(USE_STARBOARD_MEDIA)
 #include "media/base/timestamp_constants.h"
+#include "media/base/video_codecs.h"
 
 namespace media {
 
@@ -73,6 +77,37 @@ class MEDIA_EXPORT DecoderBuffer
     DiscardPadding discard_padding;
   };
 
+#if BUILDFLAG(USE_STARBOARD_MEDIA)
+  class Allocator {
+   public:
+    static Allocator* GetInstance();
+
+    // The function should never return nullptr.  It may terminate the app on
+    // allocation failure.
+    virtual void* Allocate(DemuxerStream::Type type, size_t size, size_t alignment) = 0;
+    virtual void Free(void* p, size_t size) = 0;
+
+    virtual int GetAudioBufferBudget() const = 0;
+    virtual int GetBufferAlignment() const = 0;
+    virtual int GetBufferPadding() const = 0;
+    virtual base::TimeDelta GetBufferGarbageCollectionDurationThreshold()
+        const = 0;
+    virtual int GetProgressiveBufferBudget(VideoCodec codec,
+                                           int resolution_width,
+                                           int resolution_height,
+                                           int bits_per_pixel) const = 0;
+    virtual int GetVideoBufferBudget(VideoCodec codec,
+                                     int resolution_width,
+                                     int resolution_height,
+                                     int bits_per_pixel) const = 0;
+
+   protected:
+    ~Allocator() {}
+
+    static void Set(Allocator* allocator);
+  };
+#endif  // BUILDFLAG(USE_STARBOARD_MEDIA)
+
   // Allocates buffer with |size| >= 0. |is_key_frame_| will default to false.
   explicit DecoderBuffer(size_t size);
 
@@ -166,6 +201,9 @@ class MEDIA_EXPORT DecoderBuffer
 
   const uint8_t* data() const {
     DCHECK(!end_of_stream());
+#if BUILDFLAG(USE_STARBOARD_MEDIA)
+    return data_;
+#else   // BUILDFLAG(USE_STARBOARD_MEDIA)
     if (read_only_mapping_.IsValid())
       return read_only_mapping_.GetMemoryAs<const uint8_t>();
     if (writable_mapping_.IsValid())
@@ -173,15 +211,20 @@ class MEDIA_EXPORT DecoderBuffer
     if (external_memory_)
       return external_memory_->span().data();
     return data_.get();
+#endif  // BUILDFLAG(USE_STARBOARD_MEDIA)
   }
 
   // TODO(sandersd): Remove writable_data(). https://crbug.com/834088
   uint8_t* writable_data() const {
+#if BUILDFLAG(USE_STARBOARD_MEDIA)
+    return data_;
+#else   // BUILDFLAG(USE_STARBOARD_MEDIA)
     DCHECK(!end_of_stream());
     DCHECK(!read_only_mapping_.IsValid());
     DCHECK(!writable_mapping_.IsValid());
     DCHECK(!external_memory_);
     return data_.get();
+#endif  // BUILDFLAG(USE_STARBOARD_MEDIA)
   }
 
   size_t data_size() const {
@@ -222,10 +265,18 @@ class MEDIA_EXPORT DecoderBuffer
   }
 
   // If there's no data in this buffer, it represents end of stream.
+#if BUILDFLAG(USE_STARBOARD_MEDIA)
+  bool end_of_stream() const { return !data_; }
+  void shrink_to(size_t size) {
+    DCHECK_LE(size, size_);
+    size_ = size;
+  }
+#else   // BUILDFLAG(USE_STARBOARD_MEDIA)
   bool end_of_stream() const {
     return !read_only_mapping_.IsValid() && !writable_mapping_.IsValid() &&
            !external_memory_ && !data_;
   }
+#endif  // BUILDFLAG(USE_STARBOARD_MEDIA)
 
   bool is_key_frame() const {
     DCHECK(!end_of_stream());
@@ -250,6 +301,10 @@ class MEDIA_EXPORT DecoderBuffer
   // Replaces any existing side data with data copied from |side_data|.
   void CopySideDataFrom(const uint8_t* side_data, size_t side_data_size);
 
+  // Returns total memory usage for both bookkeeping and buffered data. The
+  // function is added for more accurately memory management.
+  virtual size_t GetMemoryUsage() const;
+
  protected:
   friend class base::RefCountedThreadSafe<DecoderBuffer>;
 
@@ -260,6 +315,13 @@ class MEDIA_EXPORT DecoderBuffer
                 size_t size,
                 const uint8_t* side_data,
                 size_t side_data_size);
+#if BUILDFLAG(USE_STARBOARD_MEDIA)
+  DecoderBuffer(DemuxerStream::Type type,
+                const uint8_t* data,
+                size_t size,
+                const uint8_t* side_data,
+                size_t side_data_size);
+#endif // BUILDFLAG(USE_STARBOARD_MEDIA)
 
   DecoderBuffer(std::unique_ptr<uint8_t[]> data, size_t size);
 
@@ -271,8 +333,14 @@ class MEDIA_EXPORT DecoderBuffer
 
   virtual ~DecoderBuffer();
 
+#if BUILDFLAG(USE_STARBOARD_MEDIA)
+  // Encoded data, allocated from DecoderBuffer::Allocator.
+  uint8_t* data_ = nullptr;
+  size_t allocated_size_ = 0;
+#else   // BUILDFLAG(USE_STARBOARD_MEDIA)
   // Encoded data, if it is stored on the heap.
   std::unique_ptr<uint8_t[]> data_;
+#endif  // BUILDFLAG(USE_STARBOARD_MEDIA)
 
  private:
   TimeInfo time_info_;
@@ -300,6 +368,9 @@ class MEDIA_EXPORT DecoderBuffer
 
   // Constructor helper method for memory allocations.
   void Initialize();
+#if BUILDFLAG(USE_STARBOARD_MEDIA)
+  void Initialize(DemuxerStream::Type type);
+#endif // BUILDFLAG(USE_STARBOARD_MEDIA)
 };
 
 }  // namespace media
