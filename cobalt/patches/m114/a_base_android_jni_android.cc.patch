diff --git a/base/android/jni_android.cc b/base/android/jni_android.cc
index 0ddd543a73961..a8a014dcde9d0 100644
--- a/base/android/jni_android.cc
+++ b/base/android/jni_android.cc
@@ -4,6 +4,7 @@
 
 #include "base/android/jni_android.h"
 
+#include <cstring>
 #include <stddef.h>
 #include <sys/prctl.h>
 
@@ -13,6 +14,8 @@
 #include "base/base_jni_headers/PiiElider_jni.h"
 #include "base/debug/debugging_buildflags.h"
 #include "base/logging.h"
+#include "base/base_switches.h"
+#include "base/command_line.h"
 #include "build/build_config.h"
 #include "third_party/abseil-cpp/absl/base/attributes.h"
 
@@ -30,9 +33,52 @@ ABSL_CONST_INIT thread_local void* stack_frame_pointer = nullptr;
 
 bool g_fatal_exception_occurred = false;
 
+/* Cobalt specific hack to move Java classes to a custom namespace.
+   For every class org.chromium.foo moves them to cobalt.org.chromium.foo
+   This works around link-time conflicts when building the final
+   package against other Chromium release artifacts. */
+#if BUILDFLAG(IS_COBALT)
+const char* COBALT_ORG_CHROMIUM = "cobalt/org/chromium";
+const char* ORG_CHROMIUM = "org/chromium";
+
+bool g_add_cobalt_prefix = false;
+std::atomic<bool> g_checked_command_line(false);
+
+std::string getRepackagedName(const char* signature) {
+  std::string holder(signature);
+  size_t pos = 0;
+  while ((pos = holder.find(ORG_CHROMIUM, pos)) != std::string::npos) {
+    holder.replace(pos, strlen(ORG_CHROMIUM), COBALT_ORG_CHROMIUM);
+    pos += strlen(COBALT_ORG_CHROMIUM);
+  }
+  return holder;
+}
+
+bool shouldAddCobaltPrefix() {
+  if (!g_checked_command_line && base::CommandLine::InitializedForCurrentProcess()) {
+    g_add_cobalt_prefix = base::CommandLine::ForCurrentProcess()->HasSwitch(switches::kCobaltJniPrefix);
+    g_checked_command_line = true;
+  }
+  return g_add_cobalt_prefix;
+}
+#endif
+
 ScopedJavaLocalRef<jclass> GetClassInternal(JNIEnv* env,
+#if BUILDFLAG(IS_COBALT)
+                                            const char* original_class_name,
+                                            jobject class_loader) {
+  const char* class_name;
+  std::string holder;
+  if (shouldAddCobaltPrefix()) {
+    holder = getRepackagedName(original_class_name);
+    class_name = holder.c_str();
+  } else {
+    class_name = original_class_name;
+  }
+#else
                                             const char* class_name,
                                             jobject class_loader) {
+#endif
   jclass clazz;
   if (class_loader != nullptr) {
     // ClassLoader.loadClass expects a classname with components separated by
@@ -229,7 +275,17 @@ jmethodID MethodID::LazyGet(JNIEnv* env,
   const jmethodID value = atomic_method_id->load(std::memory_order_acquire);
   if (value)
     return value;
+#if BUILDFLAG(IS_COBALT)
+  jmethodID id;
+  if (shouldAddCobaltPrefix()) {
+    std::string holder = getRepackagedName(jni_signature);
+    id = MethodID::Get<type>(env, clazz, method_name, holder.c_str());
+  } else {
+    id = MethodID::Get<type>(env, clazz, method_name, jni_signature);
+  }
+#else
   jmethodID id = MethodID::Get<type>(env, clazz, method_name, jni_signature);
+#endif
   atomic_method_id->store(id, std::memory_order_release);
   return id;
 }
