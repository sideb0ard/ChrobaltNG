diff --git a/base/time/time.h b/base/time/time.h
index 3bea32f0606ec..12216362dee86 100644
--- a/base/time/time.h
+++ b/base/time/time.h
@@ -115,6 +115,10 @@ struct TimeSpan;
 }  // namespace ABI
 #endif
 
+#if BUILDFLAG(IS_STARBOARD)
+#include "starboard/common/time.h"  // nogncheck
+#endif
+
 namespace base {
 
 class PlatformThreadHandle;
@@ -129,7 +133,80 @@ class BASE_EXPORT TimeDelta {
  public:
   constexpr TimeDelta() = default;
 
-#if BUILDFLAG(IS_WIN)
+#if BUILDFLAG(IS_STARBOARD) && 0
+  static constexpr int64_t kHoursPerDay = 24;
+  static constexpr int64_t kSecondsPerMinute = 60;
+  static constexpr int64_t kMinutesPerHour = 60;
+  static constexpr int64_t kSecondsPerHour =
+      kSecondsPerMinute * kMinutesPerHour;
+  static constexpr int64_t kMillisecondsPerSecond = 1000;
+  static constexpr int64_t kMillisecondsPerDay =
+      kMillisecondsPerSecond * kSecondsPerHour * kHoursPerDay;
+  static constexpr int64_t kMicrosecondsPerMillisecond = 1000;
+  static constexpr int64_t kMicrosecondsPerSecond =
+      kMicrosecondsPerMillisecond * kMillisecondsPerSecond;
+  static constexpr int64_t kMicrosecondsPerMinute =
+      kMicrosecondsPerSecond * kSecondsPerMinute;
+  static constexpr int64_t kMicrosecondsPerHour =
+      kMicrosecondsPerMinute * kMinutesPerHour;
+  static constexpr int64_t kMicrosecondsPerDay =
+      kMicrosecondsPerHour * kHoursPerDay;
+  static constexpr int64_t kMicrosecondsPerWeek = kMicrosecondsPerDay * 7;
+  static constexpr int64_t kNanosecondsPerMicrosecond = 1000;
+  static constexpr int64_t kNanosecondsPerSecond =
+      kNanosecondsPerMicrosecond * kMicrosecondsPerSecond;
+
+  template <typename T>
+  static constexpr TimeDelta FromDays(T n) {
+    return FromInternalValue(MakeClampedNum(n) * kMicrosecondsPerDay);
+  }
+
+  template <typename T>
+  static constexpr TimeDelta FromHours(T n) {
+    return TimeDelta::FromInternalValue(MakeClampedNum(n) *
+                                        kMicrosecondsPerHour);
+  }
+  template <typename T>
+  static constexpr TimeDelta FromMinutes(T n) {
+    return TimeDelta::FromInternalValue(MakeClampedNum(n) *
+                                        kMicrosecondsPerMinute);
+  }
+  template <typename T>
+  static constexpr TimeDelta FromSeconds(T n) {
+    return TimeDelta::FromInternalValue(MakeClampedNum(n) *
+                                        kMicrosecondsPerSecond);
+  }
+  template <typename T>
+  static constexpr TimeDelta FromSecondsD(T n) {
+    return TimeDelta::FromInternalValue(MakeClampedNum(n) *
+                                        kMicrosecondsPerSecond);
+  }
+  template <typename T>
+  static constexpr TimeDelta FromMilliseconds(T n) {
+    return TimeDelta::FromInternalValue(MakeClampedNum(n) *
+                                        kMicrosecondsPerMillisecond);
+  }
+  template <typename T>
+  static constexpr TimeDelta FromMillisecondsD(T n) {
+    return TimeDelta::FromInternalValue(MakeClampedNum(n) *
+                                        kMicrosecondsPerMillisecond);
+  }
+  template <typename T>
+  static constexpr TimeDelta FromMicroseconds(T n) {
+    return TimeDelta::FromInternalValue(MakeClampedNum(n));
+  }
+  template <typename T>
+  static constexpr TimeDelta FromNanoseconds(T n) {
+    return TimeDelta::FromInternalValue(MakeClampedNum(n) /
+                                        kNanosecondsPerMicrosecond);
+  }
+  template <typename T>
+  static constexpr TimeDelta FromHertz(T n) {
+    return n ? TimeDelta::FromInternalValue(kMicrosecondsPerSecond /
+                                            MakeClampedNum(n))
+            : TimeDelta::Max();
+  }
+#elif BUILDFLAG(IS_WIN)
   static TimeDelta FromQPCValue(LONGLONG qpc_value);
   // TODO(crbug.com/989694): Avoid base::TimeDelta factory functions
   // based on absolute time
@@ -705,7 +782,6 @@ class BASE_EXPORT Time : public time_internal::TimeBase<Time> {
   static Time FromNSDate(NSDate* date);
   NSDate* ToNSDate() const;
 #endif
-#endif
 
 #if BUILDFLAG(IS_WIN)
   static Time FromFileTime(FILETIME ft);
@@ -745,6 +821,7 @@ class BASE_EXPORT Time : public time_internal::TimeBase<Time> {
   static void ResetHighResolutionTimerUsage();
   static double GetHighResolutionTimerUsage();
 #endif  // BUILDFLAG(IS_WIN)
+#endif
 
   // Converts an exploded structure representing either the local time or UTC
   // into a Time class. Returns false on a failure when, for example, a day of
@@ -1165,7 +1242,9 @@ class BASE_EXPORT ThreadTicks : public time_internal::TimeBase<ThreadTicks> {
 
   // Returns true if ThreadTicks::Now() is supported on this system.
   [[nodiscard]] static bool IsSupported() {
-#if (defined(_POSIX_THREAD_CPUTIME) && (_POSIX_THREAD_CPUTIME >= 0)) || \
+#if BUILDFLAG(IS_STARBOARD)
+    return starboard::CurrentMonotonicThreadTime() != 0;
+#elif (defined(_POSIX_THREAD_CPUTIME) && (_POSIX_THREAD_CPUTIME >= 0)) || \
     BUILDFLAG(IS_APPLE) || BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_FUCHSIA)
     return true;
 #elif BUILDFLAG(IS_WIN)
