diff --git a/media/filters/chunk_demuxer.cc b/media/filters/chunk_demuxer.cc
index 276b486c5a34b..06c41ff04423f 100644
--- a/media/filters/chunk_demuxer.cc
+++ b/media/filters/chunk_demuxer.cc
@@ -27,6 +27,11 @@
 #include "media/filters/source_buffer_stream.h"
 #include "media/filters/stream_parser_factory.h"
 
+#if BUILDFLAG(USE_STARBOARD_MEDIA)
+#include "base/containers/contains.h"
+#include "base/strings/string_split.h"
+#endif  // BUILDFLAG(USE_STARBOARD_MEDIA)
+
 namespace {
 
 // Helper to attempt construction of a StreamParser specific to |content_type|
@@ -56,10 +61,57 @@ std::string ExpectedCodecs(const std::string& content_type,
   return codecs;
 }
 
+#if BUILDFLAG(USE_STARBOARD_MEDIA)
+// Parse type and codecs from mime type. It will return "video/mp4" and
+// "avc1.42E01E, mp4a.40.2" for "video/mp4; codecs="avc1.42E01E, mp4a.40.2".
+// Note that this function does minimum validation as the media stack will check
+// the type and codecs strictly.
+bool ParseMimeType(const std::string& mime_type,
+                   std::string* type,
+                   std::string* codecs) {
+  DCHECK(type);
+  DCHECK(codecs);
+  static const char kCodecs[] = "codecs=";
+
+  // SplitString will also trim the results.
+  std::vector<std::string> tokens = ::base::SplitString(
+      mime_type, ";", base::TRIM_WHITESPACE, base::SPLIT_WANT_ALL);
+  // The first one has to be mime type with delimiter '/' like 'video/mp4'.
+  if (tokens.empty() || tokens[0].find('/') == tokens[0].npos) {
+    return false;
+  }
+  *type = tokens[0];
+  codecs->clear();
+  for (size_t i = 1; i < tokens.size(); ++i) {
+    if (strncasecmp(tokens[i].c_str(), kCodecs, strlen(kCodecs))) {
+      continue;
+    }
+    *codecs = tokens[i].substr(strlen(kCodecs));
+    base::TrimString(*codecs, " \"", codecs);
+    break;
+  }
+  // It is possible to not having any codecs, and will leave the validation to
+  // underlying parsers.
+  return true;
+}
+#endif  // BUILDFLAG(USE_STARBOARD_MEDIA)
+
 }  // namespace
 
 namespace media {
 
+#if BUILDFLAG(USE_STARBOARD_MEDIA)
+ChunkDemuxerStream::ChunkDemuxerStream(const std::string& mime_type,
+                                       Type type,
+                                       MediaTrack::Id media_track_id)
+    : mime_type_(mime_type),
+      type_(type),
+      liveness_(StreamLiveness::kUnknown),
+      media_track_id_(media_track_id),
+      state_(UNINITIALIZED),
+      is_enabled_(true) {}
+#endif  // BUILDFLAG(USE_STARBOARD_MEDIA)
+
 ChunkDemuxerStream::ChunkDemuxerStream(Type type, MediaTrack::Id media_track_id)
     : type_(type),
       liveness_(StreamLiveness::kUnknown),
@@ -120,6 +172,9 @@ void ChunkDemuxerStream::Seek(base::TimeDelta time) {
   DCHECK(state_ == UNINITIALIZED || state_ == RETURNING_ABORT_FOR_READS)
       << state_;
 
+#if BUILDFLAG(USE_STARBOARD_MEDIA)
+  write_head_ = time;
+#endif  // BUILDFLAG(USE_STARBOARD_MEDIA)
   stream_->Seek(time);
 }
 
@@ -165,6 +220,13 @@ bool ChunkDemuxerStream::EvictCodedFrames(base::TimeDelta media_time,
   return stream_->GarbageCollectIfNeeded(media_time, newDataSize);
 }
 
+#if BUILDFLAG(USE_STARBOARD_MEDIA)
+base::TimeDelta ChunkDemuxerStream::GetWriteHead() const {
+  base::AutoLock auto_lock(lock_);
+  return write_head_;
+}
+#endif  // BUILDFLAG(USE_STARBOARD_MEDIA)
+
 void ChunkDemuxerStream::OnMemoryPressure(
     base::TimeDelta media_time,
     base::MemoryPressureListener::MemoryPressureLevel memory_pressure_level,
@@ -227,9 +289,9 @@ base::TimeDelta ChunkDemuxerStream::GetBufferedDuration() const {
   return stream_->GetBufferedDuration();
 }
 
-size_t ChunkDemuxerStream::GetBufferedSize() const {
+size_t ChunkDemuxerStream::GetMemoryUsage() const {
   base::AutoLock auto_lock(lock_);
-  return stream_->GetBufferedSize();
+  return stream_->GetMemoryUsage();
 }
 
 void ChunkDemuxerStream::OnStartOfCodedFrameGroup(DecodeTimestamp start_dts,
@@ -296,6 +358,12 @@ void ChunkDemuxerStream::UnmarkEndOfStream() {
 }
 
 // DemuxerStream methods.
+#if BUILDFLAG(USE_STARBOARD_MEDIA)
+std::string ChunkDemuxerStream::mime_type() const {
+  return mime_type_;
+}
+#endif  // BUILDFLAG(USE_STARBOARD_MEDIA)
+
 void ChunkDemuxerStream::Read(uint32_t count, ReadCB read_cb) {
   base::AutoLock auto_lock(lock_);
   DCHECK_NE(state_, UNINITIALIZED);
@@ -432,6 +500,13 @@ void ChunkDemuxerStream::CompletePendingReadIfPossible_Locked() {
   // Other cases are kOk and just return the buffers.
   DCHECK(!buffers.empty());
   requested_buffer_count_ = 0;
+#if BUILDFLAG(USE_STARBOARD_MEDIA)
+  for (auto&& buffer : buffers) {
+    if (!buffer->end_of_stream()) {
+      write_head_ = std::max(write_head_, buffer->timestamp());
+    }
+  }
+#endif  // BUILDFLAG(USE_STARBOARD_MEDIA)
   std::move(read_cb_).Run(kOk, std::move(buffers));
 }
 
@@ -623,9 +698,9 @@ int64_t ChunkDemuxer::GetMemoryUsage() const {
   base::AutoLock auto_lock(lock_);
   int64_t mem = 0;
   for (const auto& s : audio_streams_)
-    mem += s->GetBufferedSize();
+    mem += s->GetMemoryUsage();
   for (const auto& s : video_streams_)
-    mem += s->GetBufferedSize();
+    mem += s->GetMemoryUsage();
   return mem;
 }
 
@@ -767,6 +842,19 @@ ChunkDemuxer::Status ChunkDemuxer::AddId(const std::string& id,
                        ExpectedCodecs(content_type, codecs));
 }
 
+#if BUILDFLAG(USE_STARBOARD_MEDIA)
+ChunkDemuxer::Status ChunkDemuxer::AddId(const std::string& id,
+                                         const std::string& mime_type) {
+  std::string type, codecs;
+  if (!ParseMimeType(mime_type, &type, &codecs)) {
+    return kNotSupported;
+  }
+  DCHECK(!base::Contains(id_to_mime_map_, id));
+  id_to_mime_map_[id] = mime_type;
+  return AddId(id, type, codecs);
+}
+#endif  // BUILDFLAG(USE_STARBOARD_MEDIA)
+
 ChunkDemuxer::Status ChunkDemuxer::AddIdInternal(
     const std::string& id,
     std::unique_ptr<media::StreamParser> stream_parser,
@@ -980,6 +1068,22 @@ bool ChunkDemuxer::EvictCodedFrames(const std::string& id,
   return itr->second->EvictCodedFrames(currentMediaTime, newDataSize);
 }
 
+#if BUILDFLAG(USE_STARBOARD_MEDIA)
+base::TimeDelta ChunkDemuxer::GetWriteHead(const std::string& id) const {
+  base::AutoLock auto_lock(lock_);
+  DCHECK(IsValidId_Locked(id));
+
+  auto iter = id_to_streams_map_.find(id);
+  if (iter == id_to_streams_map_.end() || iter->second.empty()) {
+    // Handled just in case.
+    NOTREACHED();
+    return base::TimeDelta();
+  }
+
+  return iter->second[0]->GetWriteHead();
+}
+#endif  // BUILDFLAG(USE_STARBOARD_MEDIA)
+
 bool ChunkDemuxer::AppendToParseBuffer(const std::string& id,
                                        const uint8_t* data,
                                        size_t length) {
@@ -1577,8 +1681,15 @@ ChunkDemuxerStream* ChunkDemuxer::CreateDemuxerStream(
       return nullptr;
   }
 
+#if BUILDFLAG(USE_STARBOARD_MEDIA)
+  auto iter = id_to_mime_map_.find(source_id);
+  std::string mime_type = iter != id_to_mime_map_.end() ? iter->second : "";
+  std::unique_ptr<ChunkDemuxerStream> stream =
+      std::make_unique<ChunkDemuxerStream>(mime_type, type, media_track_id);
+#else   // BUILDFLAG(USE_STARBOARD_MEDIA)
   std::unique_ptr<ChunkDemuxerStream> stream =
       std::make_unique<ChunkDemuxerStream>(type, media_track_id);
+#endif  // BUILDFLAG(USE_STARBOARD_MEDIA)
   DCHECK(track_id_to_demux_stream_map_.find(media_track_id) ==
          track_id_to_demux_stream_map_.end());
   track_id_to_demux_stream_map_[media_track_id] = stream.get();
